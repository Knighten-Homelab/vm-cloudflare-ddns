---
name: Manual Launch - Deploy/Destroy Environment
run-name: Manual ${{ github.event.inputs.actionSelection }} On ${{ github.event.inputs.environment }} Using ${{ github.event.inputs.releaseRef }}

on:
  workflow_dispatch:
    inputs:
      actionSelection:
        type: choice
        required: true
        description: "Action to Perform"
        options:
          - Deploy
          - Destroy
      environment:
        type: choice
        required: true
        description: "Deployment Environment"
        options:
          - prod
          - test
      releaseRef:
        type: string
        default: main
        description: "Git Ref (Branch/Tag) Checked Out During Execution"

jobs:
  apply-tf:
    runs-on: github-arc-runners
    if: ${{ github.event.inputs.actionSelection == 'Deploy'}}
    permissions:
      contents: read
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.releaseRef }}

      - name: Install Node.js (Dependency For Other Action)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets[format('VAULT_URL_{0}', github.event.inputs.environment)] }}
          token: ${{ secrets[format('VAULT_TOKEN_{0}', github.event.inputs.environment)] }}
          secrets: |
            kv/data/homelab-pve-ci-agent token-id | PVE_API_TOKEN_ID ;
            kv/data/homelab-pve-ci-agent token-secret | PVE_API_TOKEN_SECRET ;
            kv/data/pdns ci_api_Key | PDNS_API_KEY ;
            kv/data/homelab-ansible-sa ssh-key-private | PVE_CI_SSH_PRIVATE_KEY ;
            kv/data/homelab-ansible-sa ssh-key-public | PVE_CI_SSH_PUBLIC_KEY ;
            kv/data/homelab-minio-tf bucket | MINIO_TF_STATE_BUCKET ;
            kv/data/homelab-minio-tf access | MINIO_ACCESS_KEY ;
            kv/data/homelab-minio-tf secret | MINIO_SECRET_KEY ;
            kv/data/homelab-minio-tf endpoint | MINIO_ENDPOINT ;

      - name: Terraform Init
        env:
          AWS_ENDPOINT_URL_S3: ${{ steps.import-secrets.outputs.MINIO_ENDPOINT }}
          AWS_ACCESS_KEY_ID: ${{ steps.import-secrets.outputs.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.import-secrets.outputs.MINIO_SECRET_KEY}}
          AWS_S3_STATE_BUCKET: ${{ steps.import-secrets.outputs.MINIO_TF_STATE_BUCKET }}
          PM_API_TOKEN_ID: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_ID }}
          PM_API_TOKEN_SECRET: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_SECRET }}
          PDNS_API_KEY: ${{ steps.import-secrets.outputs.PDNS_API_KEY }}
          TF_VAR_pve_ci_ssh_private_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PRIVATE_KEY }}
          TF_VAR_pve_ci_ssh_public_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PUBLIC_KEY }}
        run: |
          terraform init -backend-config="bucket=${AWS_S3_STATE_BUCKET}"

      - name: Terraform Apply
        env:
          AWS_ENDPOINT_URL_S3: ${{ steps.import-secrets.outputs.MINIO_ENDPOINT }}
          AWS_ACCESS_KEY_ID: ${{ steps.import-secrets.outputs.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.import-secrets.outputs.MINIO_SECRET_KEY}}
          AWS_S3_STATE_BUCKET: ${{ steps.import-secrets.outputs.MINIO_TF_STATE_BUCKET }}
          PM_API_TOKEN_ID: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_ID }}
          PM_API_TOKEN_SECRET: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_SECRET }}
          PDNS_API_KEY: ${{ steps.import-secrets.outputs.PDNS_API_KEY }}
          TF_VAR_pve_ci_ssh_private_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PRIVATE_KEY }}
          TF_VAR_pve_ci_ssh_public_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PUBLIC_KEY }}
        run: |
          terraform apply -var-file=envs/${{ github.event.inputs.environment }}.tfvars -auto-approve

  deploy-awx-resources:
    runs-on: github-arc-runners
    needs:
      - apply-tf
    permissions:
      contents: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.releaseRef }}

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Install Ansible Playbook Dependencies
        run: ansible-galaxy collection install awx.awx

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets[format('VAULT_URL_{0}', github.event.inputs.environment)] }}
          token: ${{ secrets[format('VAULT_TOKEN_{0}', github.event.inputs.environment)] }}
          secrets: |
            kv/data/awx host | AWX_HOST ;
            kv/data/awx user | AWX_USER ;
            kv/data/awx pw | AWX_PASSWORD ;

      - name: Run AWX Resource Creation Playbook
        env:
          CONTROLLER_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          CONTROLLER_USERNAME: ${{ steps.import-secrets.outputs.AWX_USER}}
          CONTROLLER_PASSWORD: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
        working-directory: ansible
        run: |
          ansible-playbook \
            -i localhost \
            -e @envs/${{ github.event.inputs.environment }}.yaml \
            create-awx-cloudflare-ddns-deployment-resources.yaml

  deploy-app:
    runs-on: github-arc-runners
    needs:
      - deploy-awx-resources
    permissions:
      contents: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.releaseRef }}

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets[format('VAULT_URL_{0}', github.event.inputs.environment)] }}
          token: ${{ secrets[format('VAULT_TOKEN_{0}', github.event.inputs.environment)] }}
          secrets: |
            kv/data/awx host | AWX_HOST ;
            kv/data/awx user | AWX_USER ;
            kv/data/awx pw | AWX_PASSWORD ;

      - name: Query AWX for Job Template
        id: query_deploy_job_template
        env:
          AWX_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          AWX_USER: ${{ steps.import-secrets.outputs.AWX_USER}}
          AWX_PW: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
          JOB_TEMPLATE_NAME: "Cloudflare%20DDNS%20%28Containerized%29%20-%20Deploy"
        run: |
          RESPONSE=$(curl -s -u "$AWX_USER:$AWX_PW" \
            -H "Content-Type: application/json" \
            "https://$AWX_HOST/api/v2/job_templates/?name=${JOB_TEMPLATE_NAME}")

          JOB_TEMPLATE_ID=$(echo "$RESPONSE" | jq -r '.results[0].id')

          if [ "$JOB_TEMPLATE_ID" = "null" ] || [ -z "$JOB_TEMPLATE_ID" ]; then
            echo "Error: No job template found with name ${JOB_TEMPLATE_NAME}" >&2
            exit 1
          fi

          echo "Found job template ID: $JOB_TEMPLATE_ID"
          echo "job_template_id=$JOB_TEMPLATE_ID" >> $GITHUB_OUTPUT

      - name: Launch AWX Job Template
        id: launch_deploy_job
        env:
          AWX_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          AWX_USER: ${{ steps.import-secrets.outputs.AWX_USER}}
          AWX_PW: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
        run: |
          JOB_TEMPLATE_ID="${{ steps.query_deploy_job_template.outputs.job_template_id }}"
          LAUNCH_RESPONSE=$(curl -L -s -u "$AWX_USER:$AWX_PW" \
            -H "Content-Type: application/json" \
            -X POST \
            -d '{}' \
            "https://$AWX_HOST/api/v2/job_templates/${JOB_TEMPLATE_ID}/launch/")

          JOB_ID=$(echo "$LAUNCH_RESPONSE" | jq -r '.job')
          if [ "$JOB_ID" = "null" ] || [ -z "$JOB_ID" ]; then
            echo "Error: No job ID returned in launch response." >&2
            exit 1
          fi
          echo "Launched Job ID: $JOB_ID"
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Poll for Job Status
        env:
          AWX_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          AWX_USER: ${{ steps.import-secrets.outputs.AWX_USER}}
          AWX_PW: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
        run: |
          JOB_ID="${{ steps.launch_deploy_job.outputs.job_id }}"
          echo "Polling AWX for status of Job ID: $JOB_ID"
          STATUS=""
          # Poll every 10 seconds, up to a maximum of 30 minutes (180 iterations)
          for i in {1..180}; do
            RESPONSE=$(curl -s -u "$AWX_USER:$AWX_PW" \
              -H "Content-Type: application/json" \
              "https://$AWX_HOST/api/v2/jobs/$JOB_ID/")

            STATUS=$(echo "$RESPONSE" | jq -r '.status')
            
            if [[ "$STATUS" == "successful" || "$STATUS" == "failed" || "$STATUS" == "error" ]]; then
              break
            fi
            sleep 10
          done

          if [ "$STATUS" != "successful" ]; then
            echo "Job did not complete successfully. Final status: $STATUS"
            exit 1
          else
            echo "Job completed successfully. Final status: $STATUS"
          fi

  destroy-app-cleanup:
    runs-on: github-arc-runners
    if: ${{ github.event.inputs.actionSelection == 'Destroy' }}
    permissions:
      contents: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.releaseRef }}

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets[format('VAULT_URL_{0}', github.event.inputs.environment)] }}
          token: ${{ secrets[format('VAULT_TOKEN_{0}', github.event.inputs.environment)] }}
          secrets: |
            kv/data/awx host | AWX_HOST ;
            kv/data/awx user | AWX_USER ;
            kv/data/awx pw | AWX_PASSWORD ;

      - name: Query AWX for Job Template
        id: query_remove_job_template
        env:
          AWX_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          AWX_USER: ${{ steps.import-secrets.outputs.AWX_USER}}
          AWX_PW: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
          JOB_TEMPLATE_NAME: "Cloudflare%20DDNS%20%28Containerized%29%20-%20Remove"
        run: |
          RESPONSE=$(curl -s -u "$AWX_USER:$AWX_PW" \
            -H "Content-Type: application/json" \
            "https://$AWX_HOST/api/v2/job_templates/?name=${JOB_TEMPLATE_NAME}")

          JOB_TEMPLATE_ID=$(echo "$RESPONSE" | jq -r '.results[0].id')

          if [ "$JOB_TEMPLATE_ID" = "null" ] || [ -z "$JOB_TEMPLATE_ID" ]; then
            echo "Error: No job template found with name ${JOB_TEMPLATE_NAME}" >&2
            exit 1
          fi

          echo "Found job template ID: $JOB_TEMPLATE_ID"
          echo "job_template_id=$JOB_TEMPLATE_ID" >> $GITHUB_OUTPUT

      - name: Launch AWX Job Template
        id: launch_remove_job
        env:
          AWX_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          AWX_USER: ${{ steps.import-secrets.outputs.AWX_USER}}
          AWX_PW: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
        run: |
          JOB_TEMPLATE_ID="${{ steps.query_remove_job_template.outputs.job_template_id }}"
          LAUNCH_RESPONSE=$(curl -L -s -u "$AWX_USER:$AWX_PW" \
            -H "Content-Type: application/json" \
            -X POST \
            -d '{}' \
            "https://$AWX_HOST/api/v2/job_templates/${JOB_TEMPLATE_ID}/launch/")

          JOB_ID=$(echo "$LAUNCH_RESPONSE" | jq -r '.job')
          if [ "$JOB_ID" = "null" ] || [ -z "$JOB_ID" ]; then
            echo "Error: No job ID returned in launch response." >&2
            exit 1
          fi
          echo "Launched Job ID: $JOB_ID"
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Poll for Job Status
        env:
          AWX_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          AWX_USER: ${{ steps.import-secrets.outputs.AWX_USER}}
          AWX_PW: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
        run: |
          JOB_ID="${{ steps.launch_remove_job.outputs.job_id }}"
          echo "Polling AWX for status of Job ID: $JOB_ID"
          STATUS=""
          # Poll every 10 seconds, up to a maximum of 30 minutes (180 iterations)
          for i in {1..180}; do
            RESPONSE=$(curl -s -u "$AWX_USER:$AWX_PW" \
              -H "Content-Type: application/json" \
              "https://$AWX_HOST/api/v2/jobs/$JOB_ID/")

            STATUS=$(echo "$RESPONSE" | jq -r '.status')
            
            if [[ "$STATUS" == "successful" || "$STATUS" == "failed" || "$STATUS" == "error" ]]; then
              break
            fi
            sleep 10
          done

          if [ "$STATUS" != "successful" ]; then
            echo "Job did not complete successfully. Final status: $STATUS"
            exit 1
          else
            echo "Job completed successfully. Final status: $STATUS"
          fi

  destroy-awx-resources:
    runs-on: github-arc-runners
    needs:
      - destroy-app-cleanup
    permissions:
      contents: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.releaseRef }}

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Install Ansible Playbook Dependencies
        run: ansible-galaxy collection install awx.awx

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets[format('VAULT_URL_{0}', github.event.inputs.environment)] }}
          token: ${{ secrets[format('VAULT_TOKEN_{0}', github.event.inputs.environment)] }}
          secrets: |
            kv/data/awx host | AWX_HOST ;
            kv/data/awx user | AWX_USER ;
            kv/data/awx pw | AWX_PASSWORD ;

      - name: Run AWX Resource Deletion Playbook
        env:
          CONTROLLER_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          CONTROLLER_USERNAME: ${{ steps.import-secrets.outputs.AWX_USER}}
          CONTROLLER_PASSWORD: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
        working-directory: ansible
        run: |
          ansible-playbook \
            -i localhost \
            -e @envs/prod.yaml \
            delete-awx-cloudflare-ddns-deployment-resources.yaml

  destroy-tf:
    runs-on: github-arc-runners
    needs:
      - destroy-awx-resources
    permissions:
      contents: read
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.releaseRef }}

      - name: Install Node.js (Dependency For Other Action)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets[format('VAULT_URL_{0}', github.event.inputs.environment)] }}
          token: ${{ secrets[format('VAULT_TOKEN_{0}', github.event.inputs.environment)] }}
          secrets: |
            kv/data/homelab-pve-ci-agent token-id | PVE_API_TOKEN_ID ;
            kv/data/homelab-pve-ci-agent token-secret | PVE_API_TOKEN_SECRET ;
            kv/data/pdns ci_api_Key | PDNS_API_KEY ;
            kv/data/homelab-ansible-sa ssh-key-private | PVE_CI_SSH_PRIVATE_KEY ;
            kv/data/homelab-ansible-sa ssh-key-public | PVE_CI_SSH_PUBLIC_KEY ;
            kv/data/homelab-minio-tf bucket | MINIO_TF_STATE_BUCKET ;
            kv/data/homelab-minio-tf access | MINIO_ACCESS_KEY ;
            kv/data/homelab-minio-tf secret | MINIO_SECRET_KEY ;
            kv/data/homelab-minio-tf endpoint | MINIO_ENDPOINT ;

      - name: Terraform Init
        env:
          AWS_ENDPOINT_URL_S3: ${{ steps.import-secrets.outputs.MINIO_ENDPOINT }}
          AWS_ACCESS_KEY_ID: ${{ steps.import-secrets.outputs.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.import-secrets.outputs.MINIO_SECRET_KEY}}
          AWS_S3_STATE_BUCKET: ${{ steps.import-secrets.outputs.MINIO_TF_STATE_BUCKET }}
          PM_API_TOKEN_ID: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_ID }}
          PM_API_TOKEN_SECRET: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_SECRET }}
          PDNS_API_KEY: ${{ steps.import-secrets.outputs.PDNS_API_KEY }}
          TF_VAR_pve_ci_ssh_private_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PRIVATE_KEY }}
          TF_VAR_pve_ci_ssh_public_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PUBLIC_KEY }}
        run: |
          terraform init -backend-config="bucket=${AWS_S3_STATE_BUCKET}"

      - name: Terraform Destroy
        env:
          AWS_ENDPOINT_URL_S3: ${{ steps.import-secrets.outputs.MINIO_ENDPOINT }}
          AWS_ACCESS_KEY_ID: ${{ steps.import-secrets.outputs.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.import-secrets.outputs.MINIO_SECRET_KEY}}
          AWS_S3_STATE_BUCKET: ${{ steps.import-secrets.outputs.MINIO_TF_STATE_BUCKET }}
          PM_API_TOKEN_ID: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_ID }}
          PM_API_TOKEN_SECRET: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_SECRET }}
          PDNS_API_KEY: ${{ steps.import-secrets.outputs.PDNS_API_KEY }}
          TF_VAR_pve_ci_ssh_private_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PRIVATE_KEY }}
          TF_VAR_pve_ci_ssh_public_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PUBLIC_KEY }}
        run: |
          terraform destroy -var-file=envs/${{ github.event.inputs.environment }}.tfvars -auto-approve
