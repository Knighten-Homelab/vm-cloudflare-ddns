---
name: Deployment - Production
run-name: Production Deployment for Push on ${{ github.ref_name }} ${{ github.run_number }}

on:
  push:
    # branches:
    #   - main
    paths-ignore:
      - 'CHANGELOG.md'

permissions:
  contents: read

jobs:
  apply-tf:
    runs-on: github-arc-runners
    permissions:
      contents: read
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Node.js (Dependency For Other Action)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        env:
          AWS_ENDPOINT_URL_S3: ${{ secrets.S3_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
          AWS_S3_STATE_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          terraform init -backend-config="bucket=${AWS_S3_STATE_BUCKET}"

      - name: Terraform Apply
        env:
          AWS_ENDPOINT_URL_S3: ${{ secrets.S3_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
          TF_VAR_vault_token: ${{ secrets.VAULT_TOKEN }}
        run: |
          terraform apply -var-file=envs/prod.tfvars -auto-approve

  deploy-awx-resources:
    runs-on: github-arc-runners
    needs:
      - apply-tf
    permissions:
      contents: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Install Ansible Playbook Dependencies
        run: ansible-galaxy collection install awx.awx

      - name: Run AWX Resource Creation Playbook
        env:
          CONTROLLER_HOST: ${{ secrets.AWX_HOST }}
          CONTROLLER_USERNAME: ${{ secrets.AWX_USER }}
          CONTROLLER_PASSWORD: ${{ secrets.AWX_PW }}
        working-directory: ansible
        run: |
          ansible-playbook \
            -i localhost \
            -e @envs/prod.yaml \
            create-awx-cloudflare-ddns-deployment-resources.yaml

  deploy-app:
    runs-on: github-arc-runners
    needs:
      - deploy-awx-resources
    permissions:
      contents: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Query AWX for Job Template
        env:
          AWX_USER: ${{ secrets.AWX_USER }}
          AWX_PW: ${{ secrets.AWX_PW }}
          AWX_HOST: ${{ secrets.AWX_HOST }}
          JOB_TEMPLATE_NAME: "Deploy%20-%20Cloudflare%20DDNS%20%28Containerized%29"
        run: |
          RESPONSE=$(curl -s -u "$AWX_USER:$AWX_PW" \
            -H "Content-Type: application/json" \
            "https://$AWX_HOST/api/v2/job_templates/?name=${JOB_TEMPLATE_NAME}")

          JOB_TEMPLATE_ID=$(echo "$RESPONSE" | jq -r '.results[0].id')
        
          if [ "$JOB_TEMPLATE_ID" = "null" ] || [ -z "$JOB_TEMPLATE_ID" ]; then
            echo "Error: No job template found with name ${JOB_TEMPLATE_NAME}" >&2
            exit 1
          fi

          echo "Found job template ID: $JOB_TEMPLATE_ID"
          echo "job_template_id=$JOB_TEMPLATE_ID" >> $GITHUB_OUTPUT

      # - name: Launch AWX Job
      #   env:
      #     AWX_USER: ${{ secrets.AWX_USER }}
      #     AWX_PASSWORD: ${{ secrets.AWX_PASSWORD }}
      #     AWX_SERVER: ${{ secrets.AWX_HOST }}
      #     AWX_JOB_TEMPLATE_ID: ${{ secrets.AWX_JOB_TEMPLATE_ID }}
      #   run: |
      #     curl -X POST \
      #       -u "$AWX_USER:$AWX_PASSWORD" \
      #       -H "Content-Type: application/json" \
      #       -d "{\"extra_vars\": $EXTRA_VARS}" \
      #       "$AWX_HOST/api/v2/job_templates/$AWX_JOB_TEMPLATE_ID/launch/"